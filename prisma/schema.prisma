// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==== GESTÃO DE CONTAS E USUÁRIOS ====
model Account {
  id           String   @id @default(uuid())
  companyName  String   @map("company_name")
  companyCode  String   @unique @map("company_code") // Código único para login (ex: minhaempresa)
  cnpj         String?  @unique
  email        String   @unique // Email de contato da empresa
  phone        String?
  address      String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relacionamentos existentes
  users        User[]
  vehicleGroups VehicleGroup[]
  drivers      Driver[]
  trips        Trip[]
  alerts       Alert[]
  subscription Subscription?
  invoices     Invoice[]
  usageMetrics UsageMetric[]
  settings     AccountSetting?

  // NOVO Relacionamento: Associações de veículos com esta conta
  vehicleAssociations VehicleAccountAssociation[] @relation("AccountVehicleAssociations")

  @@map("accounts")
}

// Users com roles
model User {
  id           String    @id @default(uuid())
  accountId    String    @map("account_id")
  username     String    @map("username") // Nome de usuário para login (ex: joao.silva)
  name         String
  email        String
  passwordHash String    @map("password_hash")
  role         UserRole  @default(OPERATOR)
  active       Boolean   @default(true)
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  account            Account              @relation(fields: [accountId], references: [id])
  trips              Trip[]               @relation("TripCreatedBy")
  userVehicleGroups  UserVehicleGroup[]
  readAlerts         Alert[]              @relation("AlertReadBy")

  @@unique([accountId, username]) // Login: username@companyCode
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
}

// Grupos de veículos
model VehicleGroup {
  id          String    @id @default(uuid())
  accountId   String    @map("account_id")
  name        String
  description String?
  color       String    @default("#3B82F6")
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  account           Account              @relation(fields: [accountId], references: [id])
  // REMOVIDO: vehicles          Vehicle[] // Esta linha causou o erro!
  associatedVehicles VehicleAccountAssociation[] // NOVO: Relação com as associações de veículos neste grupo

  userVehicleGroups UserVehicleGroup[]

  @@unique([accountId, name])
  @@map("vehicle_groups")
}


// Controle de acesso
model UserVehicleGroup {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  user  User         @relation(fields: [userId], references: [id])
  group VehicleGroup @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("user_vehicle_groups")
}

// ==== GESTÃO DE VEÍCULOS ====
// Removido: accountId, classification diretamente da tabela Vehicle
model Vehicle {
  id              String                @id @default(uuid())
  plate           String                @unique // Placa do veículo (ex: ABC1234 ou ABC1D23)
  brand           String?
  model           String?
  year            Int?
  trackerDeviceId String?               @map("tracker_device_id")
  trackerType     String?               @map("tracker_type")
  active          Boolean               @default(true) // Ativo no sistema (não globalmente inativo)
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")

  // Relacionamento: Um veículo pode ter muitas associações com contas
  accountAssociations VehicleAccountAssociation[] @relation("VehicleAccountAssociations")

  // Relacionamentos existentes
  trips           Trip[]
  positions       VehiclePosition[]
  alerts          Alert[]

  @@map("vehicles")
}


enum VehicleClassification {
  FROTA
  AGREGADO
  TERCEIRO
}

// NOVO: Tabela de associação para gerenciar vínculos entre veículos e contas
model VehicleAccountAssociation {
  vehicleId        String                 @map("vehicle_id")
  accountId        String                 @map("account_id")
  associationType  VehicleClassification  @map("association_type") // ENUM: FROTA, AGREGADO, TERCEIRO
  isActiveForAccount Boolean              @default(true) @map("is_active_for_account")
  groupId          String?                @map("group_id") // NOVO: Referência ao grupo do veículo para esta associação

  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")

  // Relações com as tabelas Vehicle, Account e AGORA VehicleGroup
  vehicle Vehicle @relation("VehicleAccountAssociations", fields: [vehicleId], references: [id])
  account Account @relation("AccountVehicleAssociations", fields: [accountId], references: [id])
  group   VehicleGroup? @relation(fields: [groupId], references: [id]) // NOVO: Relação com VehicleGroup

  @@id([vehicleId, accountId]) // Chave primária composta
  @@map("vehicle_account_associations")
}


// Motoristas
model Driver {
  id        String       @id @default(uuid())
  accountId String       @map("account_id")
  name      String
  cnh       String       @unique
  phone     String?
  email     String?
  status    DriverStatus @default(ATIVO)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])
  trips   Trip[]

  @@map("drivers")
}

enum DriverStatus {
  ATIVO
  INATIVO
  LICENCA
  FERIAS
}

// Core - Viagens
model Trip {
  id                   String       @id @default(uuid())
  accountId            String       @map("account_id")
  vehicleId            String       @map("vehicle_id")
  driverId             String       @map("driver_id")
  createdByUserId      String       @map("created_by_user_id")
  origin               String
  destination          String
  originLat            Decimal?     @map("origin_lat") @db.Decimal(10, 8)
  originLng            Decimal?     @map("origin_lng") @db.Decimal(11, 8)
  destinationLat       Decimal?     @map("destination_lat") @db.Decimal(10, 8)
  destinationLng       Decimal?     @map("destination_lng") @db.Decimal(11, 8)
  scheduledDeparture   DateTime     @map("scheduled_departure")
  scheduledArrival     DateTime     @map("scheduled_arrival")
  actualDeparture      DateTime?    @map("actual_departure")
  actualArrival        DateTime?    @map("actual_arrival")
  status               TripStatus   @default(PLANEJADA)
  cargoDescription     String?      @map("cargo_description")
  cargoWeight          Decimal?     @map("cargo_weight") @db.Decimal(10, 2)
  clientName           String?      @map("client_name")
  clientContact        String?      @map("client_contact")
  observations         String?
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  account   Account           @relation(fields: [accountId], references: [id])
  vehicle   Vehicle           @relation(fields: [vehicleId], references: [id])
  driver    Driver            @relation(fields: [driverId], references: [id])
  createdBy User              @relation("TripCreatedBy", fields: [createdByUserId], references: [id])
  positions VehiclePosition[]
  alerts    Alert[]
  routePoints RoutePoint[]

  @@map("trips")
}

enum TripStatus {
  PLANEJADA
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
  ATRASADA
}

// Posições dos veículos
model VehiclePosition {
  id           String   @id @default(uuid())
  vehicleId    String   @map("vehicle_id")
  tripId       String?  @map("trip_id")
  latitude     Decimal  @db.Decimal(10, 8)
  longitude    Decimal  @db.Decimal(11, 8)
  speed        Decimal? @db.Decimal(5, 2)
  heading      Decimal? @db.Decimal(5, 2)
  altitude     Decimal? @db.Decimal(8, 2)
  ignition     Boolean?
  odometer     Decimal? @db.Decimal(10, 2)
  fuelLevel    Decimal? @map("fuel_level") @db.Decimal(5, 2)
  positionTime DateTime @map("position_time")
  receivedAt   DateTime @default(now()) @map("received_at")

  // Relacionamentos
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  trip    Trip?   @relation(fields: [tripId], references: [id])

  @@index([vehicleId, positionTime])
  @@map("vehicle_positions")
}

// Sistema de alertas
model Alert {
  id          String        @id @default(uuid())
  accountId   String        @map("account_id")
  vehicleId   String?       @map("vehicle_id")
  tripId      String?       @map("trip_id")
  type        AlertType
  title       String
  description String?
  severity    AlertSeverity @default(MEDIUM)
  alertData   Json?         @map("alert_data")
  read        Boolean       @default(false)
  readByUserId String?      @map("read_by_user_id")
  readAt      DateTime?     @map("read_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  account Account  @relation(fields: [accountId], references: [id])
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
  trip    Trip?    @relation(fields: [tripId], references: [id])
  readBy  User?    @relation("AlertReadBy", fields: [readByUserId], references: [id])

  @@index([accountId, read, createdAt])
  @@map("alerts")
}

enum AlertType {
  ATRASO
  DESVIO_ROTA
  PARADA_NAO_PROGRAMADA
  VELOCIDADE_EXCESSIVA
  COMBUSTIVEL_BAIXO
  MANUTENCAO_VENCIDA
  DOCUMENTO_VENCIDO
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Pontos da rota (para detecção de desvios)
model RoutePoint {
  id                    String   @id @default(uuid())
  tripId                String   @map("trip_id")
  latitude              Decimal  @db.Decimal(10, 8)
  longitude             Decimal  @db.Decimal(11, 8)
  pointOrder            Int      @map("point_order")
  toleranceRadiusMeters Int      @default(5000) @map("tolerance_radius_meters")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  trip Trip @relation(fields: [tripId], references: [id])

  @@index([tripId, pointOrder])
  @@map("route_points")
}

// ==== SISTEMA DE BILLING ====

model SubscriptionPlan {
  id             String         @id @default(uuid())
  name           String
  description    String?
  pricePerVehicle Decimal       @map("price_per_vehicle") @db.Decimal(10, 2)
  maxVehicles    Int?           @map("max_vehicles")
  maxUsers       Int?           @map("max_users")
  features       Json           @default("[]")
  trialDays      Int            @default(30) @map("trial_days")
  active         Boolean        @default(true)
  createdAt      DateTime       @default(now()) @map("created_at")

  // Relacionamentos
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(uuid())
  accountId            String             @unique @map("account_id")
  planId               String             @map("plan_id")
  status               SubscriptionStatus @default(TRIAL)
  startedAt            DateTime           @map("started_at")
  trialEndsAt          DateTime?          @map("trial_ends_at")
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  canceledAt           DateTime?          @map("canceled_at")
  contractedVehicles   Int                @default(0) @map("contracted_vehicles")
  stripeSubscriptionId String?            @map("stripe_subscription_id")
  paymentMethod        Json?              @map("payment_method")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relacionamentos
  account  Account   @relation(fields: [accountId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices Invoice[]

  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

model Invoice {
  id               String        @id @default(uuid())
  accountId        String        @map("account_id")
  subscriptionId   String        @map("subscription_id")
  invoiceNumber    String        @unique @map("invoice_number")
  periodStart      DateTime      @map("period_start")
  periodEnd        DateTime      @map("period_end")
  vehiclesCount    Int           @map("vehicles_count")
  unitPrice        Decimal       @map("unit_price") @db.Decimal(10, 2)
  subtotal         Decimal       @db.Decimal(10, 2)
  taxes            Decimal       @default(0) @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  status           InvoiceStatus @default(PENDING)
  dueDate          DateTime      @map("due_date")
  paidAt           DateTime?     @map("paid_at")
  stripeInvoiceId  String?       @map("stripe_invoice_id")
  paymentUrl       String?       @map("payment_url")
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  account      Account      @relation(fields: [accountId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
  REFUNDED
}

model UsageMetric {
  id                    String   @id @default(uuid())
  accountId             String   @map("account_id")
  date                  DateTime @db.Date
  activeVehiclesCount   Int      @default(0) @map("active_vehicles_count")
  totalVehiclesCount    Int      @default(0) @map("total_vehicles_count")
  activeUsersCount      Int      @default(0) @map("active_users_count")
  tripsCreated          Int      @default(0) @map("trips_created")
  positionsReceived     Int      @default(0) @map("positions_received")
  alertsGenerated       Int      @default(0) @map("alerts_generated")
  billableVehiclesCount Int      @default(0) @map("billable_vehicles_count")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, date])
  @@map("usage_metrics")
}

// Configurações por conta
model AccountSetting {
  id                        String   @id @default(uuid())
  accountId                 String   @unique @map("account_id")
  notificationPreferences   Json     @default("{}") @map("notification_preferences")
  alertThresholds          Json     @default("{}") @map("alert_thresholds")
  integrationConfigs       Json     @default("{}") @map("integration_configs")
  usageLimits              Json     @default("{}") @map("usage_limits")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])

  @@map("account_settings")
}