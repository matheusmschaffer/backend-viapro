// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://prisly.cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================
// ENUMS (VALORES EM PORTUGUÊS, NOMES DO ENUM EM INGLÊS)
// ======================================
enum OperationalStatus {
  CARREGADO // Vehicle is loaded / carrying cargo
  OCIOSO // Vehicle is idle / not in use
  EM_MANUTENCAO // Vehicle is currently under maintenance
  EM_VIAGEM // Vehicle is currently on a trip
  PARADO // Vehicle is stopped
  DESCONHECIDO // Unknown or initial status
}

enum LogisticStatus {
  NO_PRAZO // On time
  ATENCAO // Attention / Warning
  ATRASADO // Delayed
  CONCLUIDO // Trip completed successfully
  PLANEJADO // Trip planned, not yet started
  CANCELADO // Trip cancelled
}

// Enum compartilhado para tipos de associação de ativos (veículos, motoristas)
enum AssociationType {
  FROTA // Ativo é de propriedade/funcionario direto da conta
  AGREGADO // Ativo pertence a um terceiro e presta serviço à conta (terceirizado)
  TERCEIRO // Ativo está alugado/contratado temporariamente pela conta (locado)
}

enum DriverStatus {
  ATIVO
  INATIVO
  LICENCA
  FERIAS
}

enum AlertType {
  ATRASO
  DESVIO_ROTA
  PARADA_NAO_PROGRAMADA
  VELOCIDADE_EXCESSIVA
  COMBUSTIVEL_BAIXO
  MANUTENCAO_VENCIDA
  DOCUMENTO_VENCIDO
}

enum AlertSeverity {
  BAIXA
  MEDIA
  ALTA
  CRITICA
}

enum SubscriptionStatus {
  TESTE
  ATIVA
  EM_ATRASO
  CANCELADA
  SUSPENSA
}

enum InvoiceStatus {
  PENDENTE
  PAGA
  VENCIDA
  CANCELADA
  ESTORNADA
}

enum UserRole {
  ADMIN
  GERENTE
  OPERADOR
}

// ======================================
// FIM DOS ENUMS
// ======================================

// ==== ACCOUNT AND USER MANAGEMENT ====
model Account {
  id           String   @id @default(uuid())
  companyName  String   @map("company_name")
  companyCode  String   @unique @map("company_code")
  cnpj         String?  @unique
  email        String   @unique
  phone        String?
  address      String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  users               User[]
  vehicleGroups       VehicleGroup[]
  trips               Trip[]
  alerts              Alert[]
  subscription        Subscription?
  invoices            Invoice[]
  usageMetrics        UsageMetric[]
  settings            AccountSetting?
  
  clients             Client[]
  
  vehicleAssociations VehicleAccountAssociation[] @relation("AccountVehicleAssociations")
  driverAssociations  DriverAccountAssociation[]

  @@map("accounts")
}

// Users with roles
model User {
  id           String    @id @default(uuid())
  accountId    String    @map("account_id")
  username     String    @map("username")
  name         String
  email        String
  passwordHash String    @map("password_hash")
  role         UserRole  @default(OPERADOR)
  active       Boolean   @default(true)
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  account            Account              @relation(fields: [accountId], references: [id])
  trips              Trip[]               @relation("TripCreatedBy")
  userVehicleGroups  UserVehicleGroup[]
  readAlerts         Alert[]              @relation("AlertReadBy")

  @@unique([accountId, username])
  @@map("users")
}

// Vehicle groups
model VehicleGroup {
  id          String    @id @default(uuid())
  accountId   String    @map("account_id")
  name        String
  description String?
  color       String    @default("#3B82F6")
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  account           Account              @relation(fields: [accountId], references: [id])
  associatedVehicles VehicleAccountAssociation[]
  userVehicleGroups UserVehicleGroup[]

  @@unique([accountId, name])
  @@map("vehicle_groups")
}

// Access control
model UserVehicleGroup {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  user  User         @relation(fields: [userId], references: [id])
  group VehicleGroup @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("user_vehicle_groups")
}

// ==== VEHICLE MANAGEMENT ====
model Vehicle {
  id                     String            @id @default(uuid())
  plate                  String            @unique
  brand                  String?
  model                  String?
  year                   Int?
  trackerDeviceId        String?           @map("tracker_device_id")
  trackerType            String?           @map("tracker_type")
  active                 Boolean           @default(true)
  
  driverId               String?
  driver                 Driver?           @relation(fields: [driverId], references: [id])

  operationalStatus      OperationalStatus @default(DESCONHECIDO)
  logisticStatus         LogisticStatus    @default(PLANEJADO)
  efficiencyKmH          Float?
  idleTimeMinutes        Int               @default(0)
  distanceToDestinationKm Float?
  currentLocationLat     Float?
  currentLocationLon     Float?
  currentLocationAddress String?
  lastLocationUpdateAt   DateTime?

  currentTripId          String?           @unique
  currentTrip            Trip?             @relation("VehicleCurrentTrip", fields: [currentTripId], references: [id], onDelete: SetNull)

  kmToday                Float             @default(0)
  inMaintenance          Boolean           @default(false)

  createdAt              DateTime              @default(now()) @map("created_at")
  updatedAt              DateTime              @updatedAt @map("updated_at")

  accountAssociations VehicleAccountAssociation[] @relation("VehicleAccountAssociations")
  trips           Trip[]
  positions       VehiclePosition[]
  alerts          Alert[]

  @@map("vehicles")
}

// Modelo VehicleAccountAssociation (CORRIGIDO)
model VehicleAccountAssociation {
  id                 String                 @id @default(uuid()) // PK única
  vehicleId        String                 @map("vehicle_id")
  accountId        String                 @map("account_id")
  associationType  AssociationType        @map("association_type")
  isActiveForAccount Boolean              @default(true) @map("is_active_for_account")
  groupId          String?                @map("group_id")

  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")

  // Relacionamentos
  vehicle Vehicle @relation("VehicleAccountAssociations", fields: [vehicleId], references: [id])
  account Account @relation("AccountVehicleAssociations", fields: [accountId], references: [id])
  group   VehicleGroup? @relation(fields: [groupId], references: [id])

  @@unique([vehicleId, accountId]) // AGORA É UMA RESTRIÇÃO DE UNICIDADE, NÃO PK
  @@map("vehicle_account_associations")
}


// Motoristas (reestruturado para CPF unique e associação com Account)
model Driver {
  id              String        @id @default(uuid()) // UUID como PK interna do sistema
  cpf             String        @unique @db.VarChar(11) // CPF como identificador único de negócio
  fullName        String        @map("full_name") @db.VarChar(255) // Renomeado de 'name' para 'fullName'
  dateOfBirth     DateTime?     @map("date_of_birth") @db.Date // Novo campo
  phone           String?       @db.VarChar(20)
  email           String?       @db.VarChar(255) // Removido @unique (email não é mais globalmente único)
  cnhNumber       String?       @map("cnh_number") @db.VarChar(11) // Renomeado de 'cnh' para 'cnhNumber', removido @unique
  cnhCategory     String?       @map("cnh_category") @db.VarChar(5) // Novo campo
  cnhExpiration   DateTime?     @map("cnh_expiration") @db.Date // Novo campo
  status          DriverStatus  @default(ATIVO)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  accountAssociations DriverAccountAssociation[] // Nova relação com DriverAccountAssociation
  vehicles            Vehicle[] // back-relation para Vehicle.driverId
  trips               Trip[]    @relation("TripDriver")

  @@map("drivers")
}

// NOVA: Tabela de associação entre Motoristas e Contas
model DriverAccountAssociation {
  id                 String          @id @default(uuid())
  driverId           String          @map("driver_id")
  accountId          String          @map("account_id")
  associationType    AssociationType @map("association_type") // Usa o enum compartilhado
  startDate          DateTime        @map("start_date") @db.Date
  endDate            DateTime?       @map("end_date") @db.Date
  isActive           Boolean         @map("is_active") @default(true)

  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  // Relacionamentos
  driver             Driver          @relation(fields: [driverId], references: [id])
  account            Account         @relation(fields: [accountId], references: [id])

  // Lógica para unicidade de associação ativa por motorista/conta deve ser na aplicação
  // O índice abaixo previne múltiplos registros de mesma driver/account/isActive, mas não "isActive = true"
  @@unique([driverId, accountId, isActive])

  @@map("driver_account_associations")
}

// ======================================
// CLIENT MANAGEMENT
// ======================================
model Client {
  id            String   @id @default(uuid())
  accountId     String   @map("account_id")
  name          String
  address       String?
  contactPerson String?  @map("contact_person")
  email         String?  @unique // Mantido @unique, pois é um cliente (e-mail de contato do cliente)
  phone         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  account       Account  @relation(fields: [accountId], references: [id])
  trips         Trip[]

  @@unique([accountId, name])
  @@map("clients")
}

// ======================================
// TRIP MANAGEMENT
// ======================================
model Trip {
  id                   String       @id @default(uuid())
  accountId            String       @map("account_id")
  vehicleId            String       @map("vehicle_id")
  
  clientId             String       @map("client_id")
  
  driverId             String       @map("driver_id") // Referencia Driver.id (UUID)
  
  createdByUserId      String       @map("created_by_user_id")
  origin               String
  destination          String
  originLat            Decimal?     @map("origin_lat") @db.Decimal(10, 8)
  originLng            Decimal?     @map("origin_lng") @db.Decimal(11, 8)
  destinationLat       Decimal?     @map("destination_lat") @db.Decimal(10, 8)
  destinationLng       Decimal?     @map("destination_lng") @db.Decimal(11, 8)
  scheduledDeparture   DateTime     @map("scheduled_departure")
  scheduledArrival     DateTime     @map("scheduled_arrival")
  actualDeparture      DateTime?    @map("actual_departure")
  actualArrival        DateTime?    @map("actual_arrival")
  
  status               LogisticStatus @default(PLANEJADO) 
  
  cargoDescription     String?      @map("cargo_description")
  cargoWeight          Decimal?     @map("cargo_weight") @db.Decimal(10, 2)
  
  clientName           String?      @map("client_name") 
  clientContact        String?      @map("client_contact")
  
  observations         String?
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  account   Account           @relation(fields: [accountId], references: [id])
  vehicle   Vehicle           @relation(fields: [vehicleId], references: [id])
  
  client    Client            @relation(fields: [clientId], references: [id])
  
  tripDriver Driver           @relation("TripDriver", fields: [driverId], references: [id])
  
  createdBy User              @relation("TripCreatedBy", fields: [createdByUserId], references: [id])
  positions VehiclePosition[]
  alerts    Alert[]
  routePoints RoutePoint[]

  vehicleCurrentTrip Vehicle? @relation("VehicleCurrentTrip")

  @@map("trips")
}

// Vehicle positions
model VehiclePosition {
  id           String   @id @default(uuid())
  vehicleId    String   @map("vehicle_id")
  tripId       String?  @map("trip_id")
  latitude     Decimal  @db.Decimal(10, 8)
  longitude    Decimal  @db.Decimal(11, 8)
  speed        Decimal? @db.Decimal(5, 2)
  heading      Decimal? @db.Decimal(5, 2)
  altitude     Decimal? @db.Decimal(8, 2)
  ignition     Boolean?
  odometer     Decimal? @db.Decimal(10, 2)
  fuelLevel    Decimal? @map("fuel_level") @db.Decimal(5, 2)
  positionTime DateTime @map("position_time")
  receivedAt   DateTime @default(now()) @map("received_at")

  // Relacionamentos
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  trip    Trip?   @relation(fields: [tripId], references: [id])

  @@index([vehicleId, positionTime])
  @@map("vehicle_positions")
}

// Alert system
model Alert {
  id          String        @id @default(uuid())
  accountId   String        @map("account_id")
  vehicleId   String?       @map("vehicle_id")
  tripId      String?       @map("trip_id")
  type        AlertType
  title       String
  description String?
  severity    AlertSeverity @default(MEDIA)
  alertData   Json?         @map("alert_data")
  read        Boolean       @default(false)
  readByUserId String?      @map("read_by_user_id")
  readAt      DateTime?     @map("read_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  account Account  @relation(fields: [accountId], references: [id])
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
  trip    Trip?    @relation(fields: [tripId], references: [id])
  readBy  User?    @relation("AlertReadBy", fields: [readByUserId], references: [id])

  @@index([accountId, read, createdAt])
  @@map("alerts")
}

// Route points (for deviation detection)
model RoutePoint {
  id                    String   @id @default(uuid())
  tripId                String   @map("trip_id")
  latitude              Decimal  @db.Decimal(10, 8)
  longitude             Decimal  @db.Decimal(11, 8)
  pointOrder            Int      @map("point_order")
  toleranceRadiusMeters Int      @default(5000) @map("tolerance_radius_meters")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  trip Trip @relation(fields: [tripId], references: [id])

  @@index([tripId, pointOrder])
  @@map("route_points")
}

// ==== BILLING SYSTEM ====

model SubscriptionPlan {
  id             String         @id @default(uuid())
  name           String
  description    String?
  pricePerVehicle Decimal       @map("price_per_vehicle") @db.Decimal(10, 2)
  maxVehicles    Int?           @map("max_vehicles")
  maxUsers       Int?           @map("max_users")
  features       Json           @default("[]")
  trialDays      Int            @default(30) @map("trial_days")
  active         Boolean        @default(true)
  createdAt      DateTime       @default(now()) @map("created_at")

  // Relacionamentos
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(uuid())
  accountId            String             @unique @map("account_id")
  planId               String             @map("plan_id")
  status               SubscriptionStatus @default(TESTE)
  startedAt            DateTime           @map("started_at")
  trialEndsAt          DateTime?          @map("trial_ends_at")
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  canceledAt           DateTime?          @map("canceled_at")
  contractedVehicles   Int                @default(0) @map("contracted_vehicles")
  stripeSubscriptionId String?            @map("stripe_subscription_id")
  paymentMethod        Json?              @map("payment_method")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relacionamentos
  account  Account          @relation(fields: [accountId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id               String        @id @default(uuid())
  accountId        String        @map("account_id")
  subscriptionId   String        @map("subscription_id")
  invoiceNumber    String        @unique @map("invoice_number")
  periodStart      DateTime      @map("period_start")
  periodEnd        DateTime      @map("period_end")
  vehiclesCount    Int           @map("vehicles_count")
  unitPrice        Decimal       @map("unit_price") @db.Decimal(10, 2)
  subtotal         Decimal       @db.Decimal(10, 2)
  taxes            Decimal       @default(0) @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  status           InvoiceStatus @default(PENDENTE)
  dueDate          DateTime      @map("due_date")
  paidAt           DateTime?     @map("paid_at")
  stripeInvoiceId  String?       @map("stripe_invoice_id")
  paymentUrl       String?       @map("payment_url")
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  account      Account      @relation(fields: [accountId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

model UsageMetric {
  id                    String   @id @default(uuid())
  accountId             String   @map("account_id")
  date                  DateTime @db.Date
  activeVehiclesCount   Int      @default(0) @map("active_vehicles_count")
  totalVehiclesCount    Int      @default(0) @map("total_vehicles_count")
  activeUsersCount      Int      @default(0) @map("active_users_count")
  tripsCreated          Int      @default(0) @map("trips_created")
  positionsReceived     Int      @default(0) @map("positions_received")
  alertsGenerated       Int      @default(0) @map("alerts_generated")
  billableVehiclesCount Int      @default(0) @map("billable_vehicles_count")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, date])
  @@map("usage_metrics")
}

// Account settings
model AccountSetting {
  id                        String   @id @default(uuid())
  accountId                 String   @unique @map("account_id")
  notificationPreferences   Json     @default("{}") @map("notification_preferences")
  alertThresholds          Json     @default("{}") @map("alert_thresholds")
  integrationConfigs       Json     @default("{}") @map("integration_configs")
  usageLimits              Json     @default("{}") @map("usage_limits")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])

  @@map("account_settings")
}