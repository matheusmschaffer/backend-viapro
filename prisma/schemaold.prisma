// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://prisly.cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================
// NOVOS ENUMS PARA OS NOVOS CAMPOS
// ======================================
enum OperationalStatus {
  CARREGADO      // Vehicle is loaded / carrying cargo (similar a EM_VIAGEM/EM_ANDAMENTO mas com foco na carga)
  OCIOSO         // Vehicle is idle / not in use
  EM_MANUTENCAO  // Vehicle is currently under maintenance
  EM_VIAGEM      // Vehicle is currently on a trip (em movimento, sem carga específica em foco)
  PARADO         // Vehicle is stopped (e.g., at a stopover, not necessarily idle)
  DESCONHECIDO   // Unknown or initial status
}

enum LogisticStatus {
  NO_PRAZO   // On time
  ATENCAO    // Attention / Warning (e.g., slight delay, needs monitoring)
  ATRASADO   // Delayed
  CONCLUIDO  // Trip completed successfully
  PLANEJADO  // Trip planned, not yet started
  CANCELADO  // Trip cancelled
}

// ======================================
// FIM DOS NOVOS ENUMS
// ======================================

// ==== GESTÃO DE CONTAS E USUÁRIOS ====
model Account {
  id           String   @id @default(uuid())
  companyName  String   @map("company_name")
  companyCode  String   @unique @map("company_code") // Código único para login (ex: minhaempresa)
  cnpj         String?  @unique
  email        String   @unique // Email de contato da empresa
  phone        String?
  address      String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relacionamentos existentes
  users               User[]
  vehicleGroups       VehicleGroup[]
  drivers             Driver[]
  trips               Trip[]
  alerts              Alert[]
  subscription        Subscription?
  invoices            Invoice[]
  usageMetrics        UsageMetric[]
  settings            AccountSetting?
  
  // Relacionamento com a NOVA TABELA Client
  clients             Client[] // Um Account pode ter muitos Clients

  // Relacionamento existente: Associações de veículos com esta conta
  vehicleAssociations VehicleAccountAssociation[] @relation("AccountVehicleAssociations")

  @@map("accounts")
}

// Users com roles
model User {
  id           String    @id @default(uuid())
  accountId    String    @map("account_id")
  username     String    @map("username") // Nome de usuário para login (ex: joao.silva)
  name         String
  email        String
  passwordHash String    @map("password_hash")
  role         UserRole  @default(OPERATOR)
  active       Boolean   @default(true)
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  account            Account              @relation(fields: [accountId], references: [id])
  trips              Trip[]               @relation("TripCreatedBy")
  userVehicleGroups  UserVehicleGroup[]
  readAlerts         Alert[]              @relation("AlertReadBy")

  @@unique([accountId, username]) // Login: username@companyCode
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
}

// Grupos de veículos
model VehicleGroup {
  id          String    @id @default(uuid())
  accountId   String    @map("account_id")
  name        String
  description String?
  color       String    @default("#3B82F6")
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  account           Account              @relation(fields: [accountId], references: [id])
  // REMOVIDO: vehicles          Vehicle[] // Esta linha causou o erro! (Está correto manter removida se usar VehicleAccountAssociation)
  associatedVehicles VehicleAccountAssociation[] // Relação com as associações de veículos neste grupo

  userVehicleGroups UserVehicleGroup[]

  @@unique([accountId, name])
  @@map("vehicle_groups")
}

// Controle de acesso
model UserVehicleGroup {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  user  User         @relation(fields: [userId], references: [id])
  group VehicleGroup @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("user_vehicle_groups")
}

// ==== GESTÃO DE VEÍCULOS ====
// Removido: accountId, classification diretamente da tabela Vehicle (Continua assim)
model Vehicle {
  id                     String            @id @default(uuid())
  plate                  String            @unique // Placa do veículo (ex: ABC1234 ou ABC1D23)
  brand                  String?
  model                  String?
  year                   Int?
  trackerDeviceId        String?           @map("tracker_device_id")
  trackerType            String?           @map("tracker_type")
  active                 Boolean           @default(true) // Ativo no sistema (não globalmente inativo)
  
  // Relação com o Motorista principal/atual do veículo (NÃO o motorista da viagem)
  driverId               String?
  driver                 Driver?           @relation(fields: [driverId], references: [id])

  // NOVOS CAMPOS SOLICITADOS - ADICIONADOS AQUI
  operationalStatus      OperationalStatus @default(DESCONHECIDO) // Status operacional do veículo
  logisticStatus         LogisticStatus    @default(PLANEJADO)    // Status logístico do veículo (derivado de trips ou manualmente)
  efficiencyKmH          Float?            // Eficiência em Km/h (velocidade média de movimento)
  idleTimeMinutes        Int               @default(0) // Tempo em minutos que o veículo está parado/ocioso
  distanceToDestinationKm Float?           // Distância restante até o destino final da viagem atual
  currentLocationLat     Float?            // Latitude da localização atual
  currentLocationLon     Float?            // Longitude da localização atual
  currentLocationAddress String?           // Endereço da localização atual
  lastLocationUpdateAt   DateTime?         // Timestamp da última atualização de localização

  // Relação 1:1 para a viagem atual. Um veículo só pode ter uma viagem "currentTrip" por vez.
  currentTripId          String?           @unique // ID da viagem atual que o veículo está realizando
  currentTrip            Trip?             @relation("VehicleCurrentTrip", fields: [currentTripId], references: [id], onDelete: SetNull) // onDelete: SetNull para não apagar a viagem se o veículo for desassociado ou deletado.

  // Campos adicionais observados no dashboard (ex: "KM Hoje", "Em Manutenção")
  kmToday                Float             @default(0) // Quilometragem rodada no dia atual
  inMaintenance          Boolean           @default(false) // Indica se o veículo está em manutenção

  createdAt              DateTime              @default(now()) @map("created_at")
  updatedAt              DateTime              @updatedAt @map("updated_at")

  // Relacionamento existente: Um veículo pode ter muitas associações com contas
  accountAssociations VehicleAccountAssociation[] @relation("VehicleAccountAssociations")

  // Relacionamentos existentes
  trips           Trip[] // Um veículo pode ter muitas viagens ao longo de sua vida útil
  positions       VehiclePosition[]
  alerts          Alert[]

  @@map("vehicles")
}

// Enum VehicleClassification existente
enum VehicleClassification {
  FROTA
  AGREGADO
  TERCEIRO
}

// Tabela de associação existente VehicleAccountAssociation
model VehicleAccountAssociation {
  vehicleId        String                 @map("vehicle_id")
  accountId        String                 @map("account_id")
  associationType  VehicleClassification  @map("association_type") // ENUM: FROTA, AGREGADO, TERCEIRO
  isActiveForAccount Boolean              @default(true) @map("is_active_for_account")
  groupId          String?                @map("group_id") // Referência ao grupo do veículo para esta associação

  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")

  // Relações com as tabelas Vehicle, Account e VehicleGroup
  vehicle Vehicle @relation("VehicleAccountAssociations", fields: [vehicleId], references: [id])
  account Account @relation("AccountVehicleAssociations", fields: [accountId], references: [id])
  group   VehicleGroup? @relation(fields: [groupId], references: [id]) // Relação com VehicleGroup

  @@id([vehicleId, accountId]) // Chave primária composta
  @@map("vehicle_account_associations")
}


// Motoristas
model Driver {
  id        String       @id @default(uuid())
  accountId String       @map("account_id")
  name      String
  cnh       String?      @unique // Alterado para String? para permitir ser opcional, mas @unique para ser único se preenchido
  phone     String?
  email     String?      @unique // Alterado para String? para permitir ser opcional, mas @unique para ser único se preenchido
  status    DriverStatus @default(ATIVO)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  account  Account    @relation(fields: [accountId], references: [id])
  vehicles Vehicle[]  // Um motorista pode ser o motorista principal/atual de muitos veículos (back-relation para Vehicle.driverId)
  trips    Trip[]     @relation("TripDriver") // Um motorista pode fazer muitas viagens (como motorista específico para esta viagem)

  @@map("drivers")
}

enum DriverStatus {
  ATIVO
  INATIVO
  LICENCA
  FERIAS
}

// ======================================
// NOVA TABELA CLIENT
// ======================================
model Client {
  id            String   @id @default(uuid())
  accountId     String   @map("account_id") // Um cliente pertence a uma conta da transportadora
  name          String   // Nome do cliente
  address       String?  // Endereço do cliente
  contactPerson String?  // Pessoa de contato do cliente
  email         String?  @unique // E-mail do cliente (opcional, mas bom ter um @unique se usado)
  phone         String?  // Telefone do cliente
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  account       Account  @relation(fields: [accountId], references: [id])
  trips         Trip[]   // Um cliente pode ter muitas viagens

  @@unique([accountId, name]) // Nome do cliente único por conta
  @@map("clients")
}
// ======================================
// FIM DA NOVA TABELA CLIENT
// ======================================


// Core - Viagens
model Trip {
  id                   String       @id @default(uuid())
  accountId            String       @map("account_id")
  vehicleId            String       @map("vehicle_id")
  
  // NOVO: Adicionado clientId para relacionar a viagem a um cliente
  clientId             String       @map("client_id") // Relaciona a viagem a um cliente
  
  // NOVO: tripDriverId para o motorista específico desta viagem (pode ser diferente do driverId do Vehicle)
  tripDriverId         String?      @map("trip_driver_id") 

  createdByUserId      String       @map("created_by_user_id")
  origin               String
  destination          String
  originLat            Decimal?     @map("origin_lat") @db.Decimal(10, 8)
  originLng            Decimal?     @map("origin_lng") @db.Decimal(11, 8)
  destinationLat       Decimal?     @map("destination_lat") @db.Decimal(10, 8)
  destinationLng       Decimal?     @map("destination_lng") @db.Decimal(11, 8)
  scheduledDeparture   DateTime     @map("scheduled_departure")
  scheduledArrival     DateTime     @map("scheduled_arrival")
  actualDeparture      DateTime?    @map("actual_departure")
  actualArrival        DateTime?    @map("actual_arrival")
  
  // NOVO: status agora usa o Enum LogisticStatus
  status               LogisticStatus @default(PLANEJADO) 
  
  cargoDescription     String?      @map("cargo_description")
  cargoWeight          Decimal?     @map("cargo_weight") @db.Decimal(10, 2)
  
  // clientName e clientContact podem ser mantidos como cache ou se necessário para compatibilidade,
  // mas a relação principal é com clientId.
  clientName           String?      @map("client_name") 
  clientContact        String?      @map("client_contact")
  
  observations         String?
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  account   Account           @relation(fields: [accountId], references: [id])
  vehicle   Vehicle           @relation(fields: [vehicleId], references: [id])
  
  // NOVA Relação com a tabela Client
  client    Client            @relation(fields: [clientId], references: [id])
  
  // NOVA Relação com o motorista específico da viagem (TripDriver)
  tripDriver Driver?          @relation("TripDriver", fields: [tripDriverId], references: [id])
  
  createdBy User              @relation("TripCreatedBy", fields: [createdByUserId], references: [id])
  positions VehiclePosition[]
  alerts    Alert[]
  routePoints RoutePoint[]

  // Back-relation para o campo currentTrip na tabela Vehicle (para a relação 1:1)
  vehicleCurrentTrip Vehicle? @relation("VehicleCurrentTrip")

  @@map("trips")
}

// O antigo enum TripStatus não é mais necessário se LogisticStatus for usado.
// Se precisar de ambos para diferentes propósitos, pode mantê-lo e renomear o campo status em Trip.
// enum TripStatus {
//   PLANEJADA
//   EM_ANDAMENTO
//   CONCLUIDA
//   CANCELADA
//   ATRASADA
// }

// Posições dos veículos
model VehiclePosition {
  id           String   @id @default(uuid())
  vehicleId    String   @map("vehicle_id")
  tripId       String?  @map("trip_id")
  latitude     Decimal  @db.Decimal(10, 8)
  longitude    Decimal  @db.Decimal(11, 8)
  speed        Decimal? @db.Decimal(5, 2)
  heading      Decimal? @db.Decimal(5, 2)
  altitude     Decimal? @db.Decimal(8, 2)
  ignition     Boolean?
  odometer     Decimal? @db.Decimal(10, 2)
  fuelLevel    Decimal? @map("fuel_level") @db.Decimal(5, 2)
  positionTime DateTime @map("position_time")
  receivedAt   DateTime @default(now()) @map("received_at")

  // Relacionamentos
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  trip    Trip?   @relation(fields: [tripId], references: [id])

  @@index([vehicleId, positionTime])
  @@map("vehicle_positions")
}

// Sistema de alertas
model Alert {
  id          String        @id @default(uuid())
  accountId   String        @map("account_id")
  vehicleId   String?       @map("vehicle_id")
  tripId      String?       @map("trip_id")
  type        AlertType
  title       String
  description String?
  severity    AlertSeverity @default(MEDIUM)
  alertData   Json?         @map("alert_data")
  read        Boolean       @default(false)
  readByUserId String?      @map("read_by_user_id")
  readAt      DateTime?     @map("read_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  account Account  @relation(fields: [accountId], references: [id])
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
  trip    Trip?    @relation(fields: [tripId], references: [id])
  readBy  User?    @relation("AlertReadBy", fields: [readByUserId], references: [id])

  @@index([accountId, read, createdAt])
  @@map("alerts")
}

enum AlertType {
  ATRASO
  DESVIO_ROTA
  PARADA_NAO_PROGRAMADA
  VELOCIDADE_EXCESSIVA
  COMBUSTIVEL_BAIXO
  MANUTENCAO_VENCIDA
  DOCUMENTO_VENCIDO
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Pontos da rota (para detecção de desvios)
model RoutePoint {
  id                    String   @id @default(uuid())
  tripId                String   @map("trip_id")
  latitude              Decimal  @db.Decimal(10, 8)
  longitude             Decimal  @db.Decimal(11, 8)
  pointOrder            Int      @map("point_order")
  toleranceRadiusMeters Int      @default(5000) @map("tolerance_radius_meters")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  trip Trip @relation(fields: [tripId], references: [id])

  @@index([tripId, pointOrder])
  @@map("route_points")
}

// ==== SISTEMA DE BILLING ====

model SubscriptionPlan {
  id             String         @id @default(uuid())
  name           String
  description    String?
  pricePerVehicle Decimal       @map("price_per_vehicle") @db.Decimal(10, 2)
  maxVehicles    Int?           @map("max_vehicles")
  maxUsers       Int?           @map("max_users")
  features       Json           @default("[]")
  trialDays      Int            @default(30) @map("trial_days")
  active         Boolean        @default(true)
  createdAt      DateTime       @default(now()) @map("created_at")

  // Relacionamentos
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(uuid())
  accountId            String             @unique @map("account_id")
  planId               String             @map("plan_id")
  status               SubscriptionStatus @default(TRIAL)
  startedAt            DateTime           @map("started_at")
  trialEndsAt          DateTime?          @map("trial_ends_at")
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  canceledAt           DateTime?          @map("canceled_at")
  contractedVehicles   Int                @default(0) @map("contracted_vehicles")
  stripeSubscriptionId String?            @map("stripe_subscription_id")
  paymentMethod        Json?              @map("payment_method")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relacionamentos
  account  Account          @relation(fields: [accountId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices Invoice[]

  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

model Invoice {
  id               String        @id @default(uuid())
  accountId        String        @map("account_id")
  subscriptionId   String        @map("subscription_id")
  invoiceNumber    String        @unique @map("invoice_number")
  periodStart      DateTime      @map("period_start")
  periodEnd        DateTime      @map("period_end")
  vehiclesCount    Int           @map("vehicles_count")
  unitPrice        Decimal       @map("unit_price") @db.Decimal(10, 2)
  subtotal         Decimal       @db.Decimal(10, 2)
  taxes            Decimal       @default(0) @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  status           InvoiceStatus @default(PENDING)
  dueDate          DateTime      @map("due_date")
  paidAt           DateTime?     @map("paid_at")
  stripeInvoiceId  String?       @map("stripe_invoice_id")
  paymentUrl       String?       @map("payment_url")
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  account      Account      @relation(fields: [accountId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
  REFUNDED
}

model UsageMetric {
  id                    String   @id @default(uuid())
  accountId             String   @map("account_id")
  date                  DateTime @db.Date
  activeVehiclesCount   Int      @default(0) @map("active_vehicles_count")
  totalVehiclesCount    Int      @default(0) @map("total_vehicles_count")
  activeUsersCount      Int      @default(0) @map("active_users_count")
  tripsCreated          Int      @default(0) @map("trips_created")
  positionsReceived     Int      @default(0) @map("positions_received")
  alertsGenerated       Int      @default(0) @map("alerts_generated")
  billableVehiclesCount Int      @default(0) @map("billable_vehicles_count")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, date])
  @@map("usage_metrics")
}

// Configurações por conta
model AccountSetting {
  id                        String   @id @default(uuid())
  accountId                 String   @unique @map("account_id")
  notificationPreferences   Json     @default("{}") @map("notification_preferences")
  alertThresholds          Json     @default("{}") @map("alert_thresholds")
  integrationConfigs       Json     @default("{}") @map("integration_configs")
  usageLimits              Json     @default("{}") @map("usage_limits")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  account Account @relation(fields: [accountId], references: [id])

  @@map("account_settings")
}